
ADC with polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c8  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000620  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000361  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_initialise>:
    }
}

void ADC_initialise(void)
{
	ADMUX|=(1<<REFS0)|(1<<ADLAR);
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 66       	ori	r24, 0x60	; 96
  70:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADPS2);
  72:	86 b1       	in	r24, 0x06	; 6
  74:	84 68       	ori	r24, 0x84	; 132
  76:	86 b9       	out	0x06, r24	; 6
  78:	08 95       	ret

0000007a <ADC_channel>:
}

int ADC_channel(int channel)
{
	channel=channel & 0b00000111;
	ADMUX|=channel;
  7a:	27 b1       	in	r18, 0x07	; 7
  7c:	87 70       	andi	r24, 0x07	; 7
  7e:	99 27       	eor	r25, r25
  80:	82 2b       	or	r24, r18
  82:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
  84:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADSC))==0)
  86:	36 9b       	sbis	0x06, 6	; 6
  88:	fe cf       	rjmp	.-4      	; 0x86 <ADC_channel+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	83 ec       	ldi	r24, 0xC3	; 195
  8c:	99 e0       	ldi	r25, 0x09	; 9
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <ADC_channel+0x14>
  92:	00 c0       	rjmp	.+0      	; 0x94 <ADC_channel+0x1a>
  94:	00 00       	nop
	{}
    _delay_ms (10);
	ADCSRA|=(1<<ADIF);
  96:	34 9a       	sbi	0x06, 4	; 6
	return(ADCL);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	08 95       	ret

0000009e <main>:
#include <avr/io.h>
#include <stdlib.h>
#include <util/delay.h>

int main(void)
{   TCCR0 |= 1<<WGM00 | 1<<WGM01 | 1<<COM01 | 1<<CS00;
  9e:	83 b7       	in	r24, 0x33	; 51
  a0:	89 66       	ori	r24, 0x69	; 105
  a2:	83 bf       	out	0x33, r24	; 51
	DDRB |= 1<<PINB3;
  a4:	bb 9a       	sbi	0x17, 3	; 23
	
    /* Replace with your application code */
    while (1) 
    {
		ADC_initialise();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_initialise>
		OCR0=ADC_channel(5);	
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 3d 00 	call	0x7a	; 0x7a <ADC_channel>
  b2:	8c bf       	out	0x3c, r24	; 60
  b4:	f8 cf       	rjmp	.-16     	; 0xa6 <main+0x8>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
